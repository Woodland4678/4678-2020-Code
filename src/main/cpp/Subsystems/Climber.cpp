// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Climber.h"
const double CLIMB_P = 1;
const double CLIMB_I = 0;
const double CLIMB_D = 0;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Climber::Climber() : frc::Subsystem("Climber") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
climberMotor.reset(new rev::CANSparkMax(14, rev::CANSparkMax::MotorType::kBrushless));


rachetServo.reset(new frc::Servo(0));
AddChild("rachetServo", rachetServo);

climberSolenoid.reset(new frc::Solenoid(0, 0));
AddChild("climberSolenoid", climberSolenoid);

shimmyMotor.reset(new frc::VictorSP(1));
AddChild("shimmyMotor", std::static_pointer_cast<frc::VictorSP>(shimmyMotor));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
climberMotor->GetPIDController().SetP(CLIMB_P,0);
climberMotor->GetPIDController().SetI(CLIMB_I,0);
climberMotor->GetPIDController().SetD(CLIMB_D,0);
}

void Climber::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Climber::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

void Climber::lock() {
    rachetServo->Set(1);
}
bool Climber::unlock(){
    switch (unlockCase) {
        case 0:
            rachetServo->Set(0.7);
            unlockCase = 1;
        break;
        case 1:
            cnt++;
            if (cnt > 20) {
                unlockCase = 2;
            }
        break;
        case 2:
            setClimberPosition(climberMotor->GetEncoder().GetPosition() - 200);
            unlockCase = 3;
        break;
        case 3:
            unlockCase = 0;
            return true;
        break;
        return false;
    }
    rachetServo->Set(0);
}
void Climber::setClimberPosition(double position) {
    climberMotor->GetPIDController().SetReference(position,rev::ControlType::kPosition,0);
}
void Climber::setClimberPower(double power) {
    climberMotor->Set(power);
}
void Climber::setShimmyMotor(double power) {
    shimmyMotor->Set(power);
}
void Climber::shiftToExtendMode() {
    climberSolenoid->Set(false);
}
void Climber::shiftToWinchMode() {
    climberSolenoid->Set(true);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

